package com.logic;

import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPRow;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.Image;
import static java.io.File.separator;
import java.io.IOException;
import java.net.URL;

/**
 *
 * @author Brandstrup
 */
public class PDFCalculator
{

    private Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 24,
            Font.BOLD);
    private Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);
    private Font verySmall = new Font(Font.FontFamily.TIMES_ROMAN, 11,
            Font.NORMAL);

    /**
     * Initiates the PDF document with a title, author and timestamp. Also calls
     * separate methods to generate a table for the bill of materials.
     *
     * @param author the author of the document
     * @param stringList the data used for the bill of materials
     * @param headerTitle the title of the document
     * @param orderId the ID # of the order
     * @param customerAddress
     * @return Paragraph the paragraph object containing a bill of materials and
     * as well as header for the bill
     * @throws DocumentException
     * @throws BadElementException
     * @throws IOException
     */
    public Paragraph generateBill(String author, java.util.List<String> stringList,
            String headerTitle, int orderId, String customerAddress) throws DocumentException, BadElementException, IOException
    {
        Paragraph para1 = new Paragraph();
        addEmptyLine(para1, 1);
        Paragraph title = new Paragraph(headerTitle, catFont);
        title.setAlignment(Element.ALIGN_CENTER);
        para1.add(title);
        addFogImage(para1);
        addEmptyLine(para1, 1);
        para1.add(new Paragraph("Generated by: " + author + ", " + new Date(), smallBold));
        addEmptyLine(para1, 1);
        para1.add(new Paragraph("Ordre ID#: " + orderId, smallBold));
        para1.add(new Paragraph("Shipping address: " + customerAddress, smallBold));
        addEmptyLine(para1, 2);

        PdfPTable table = generateTable(stringList);
        para1.add(table);

        return para1;
    }

    /**
     * Adds metadata to the provided document, specifying the title, programming
     * language, the import used (iText), the author and the creator. This
     * metadata can be viewed by using PDF viewing app by accessing the file
     * properties.
     *
     * @param document the document objet to modify
     * @param title the titel to be added to the document
     */
    public void addMetaData(Document document, String title)
    {
        document.addTitle(title);
        document.addSubject("Stykliste");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("The Martins");
        document.addCreator("The Martins");
    }

    /**
     * Finds the Fog logo from the project folders and converts it into a usable
     * Image object to be used in the PDF.
     *
     * @param paragraph the Paragraph of which to add the image
     * @throws BadElementException
     * @throws IOException
     */
    public void addFogImage(Paragraph paragraph) throws BadElementException, IOException
    {
        String imagePath = "index.jpg";

        ClassLoader classLoader = getClass().getClassLoader();
        URL url = classLoader.getResource(imagePath);
        Image img = Image.getInstance(url);
        img.setAlignment(Element.ALIGN_MIDDLE);
        img.scalePercent(20f, 20f);

        addEmptyLine(paragraph, 2);
        paragraph.add(img);
    }

    /**
     * Calculates and generates a table used for the bill of materials.
     *
     * @param stringList the data to populate the table with
     * @return PdfPTable the generated table containing the bill of materials
     * @throws DocumentException
     * @author Brandstrup
     */
    private PdfPTable generateTable(java.util.List<String> stringList) throws DocumentException
    {
        if(stringList.size() % 7 > 0)
        {
            throw new IllegalArgumentException("StringList has illegal size");
        }
        PdfPTable table = new PdfPTable(7);
        float[] ws = new float[7];

        table.setWidthPercentage(110);
        ws[0] = 25f;
        ws[1] = 35f;
        ws[2] = 8f;
        ws[3] = 8f;
        ws[4] = 8f;
        ws[5] = 9f;
        ws[6] = 7f;

        table.setWidths(ws);
        addTableHeader(table);

        int amountOfRows = 0;
        for (int i = 0; i < (stringList.size() / 7); i++)
        {
            addRowToTable(table);
            amountOfRows++;
        }

        int cellCounter = 0;
        for (int i = 1; i < amountOfRows + 1; i++)
        {
            PdfPRow r = table.getRow(i);
            for (PdfPCell c : r.getCells())
            {
                Phrase content = new Phrase(stringList.get(cellCounter), verySmall);
                c.setPhrase(content);
                cellCounter++;
            }
        }
        return table;
    }

    /**
     * Adds a header row to a table with descriptions of each column.
     *
     * @param table the table you want to add the header to
     * @author Brandstrup
     */
    private void addTableHeader(PdfPTable table)
    {
        PdfPCell cell;

        float cellPaddingBottom = 7;

        cell = new PdfPCell(new Phrase("Beskrivelse", smallBold));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setPaddingBottom(cellPaddingBottom);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Hjælpetext", smallBold));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setPaddingBottom(cellPaddingBottom);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Længde", smallBold));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setPaddingBottom(cellPaddingBottom);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Bredde", smallBold));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setPaddingBottom(cellPaddingBottom);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Højde", smallBold));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setPaddingBottom(cellPaddingBottom);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Pris", smallBold));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setPaddingBottom(cellPaddingBottom);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Antal", smallBold));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setPaddingBottom(cellPaddingBottom);
        table.addCell(cell);

        table.setHeaderRows(1);
    }

    /**
     * Adds a row of cells to a table formatted to contain the proper data for a
     * bill of materials.
     *
     * @param table the table you want to add the cell row to
     * @author Brandstrup
     */
    private void addRowToTable(PdfPTable table)
    {
        PdfPCell cell;

        float cellPaddingBottom = 8;
        float cellPaddingTop = 8;
        float cellPaddingLeft = 3;

        cell = new PdfPCell(new Phrase("Beskrivelse", verySmall));
        cell.setPaddingBottom(cellPaddingBottom);
        cell.setPaddingLeft(cellPaddingLeft);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Hjælpetext", verySmall));
        cell.setPaddingBottom(cellPaddingBottom);
        cell.setPaddingLeft(cellPaddingLeft);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Længde", verySmall));
        cell.setPaddingTop(cellPaddingTop);
        cell.setPaddingBottom(cellPaddingBottom);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Bredde", verySmall));
        cell.setPaddingTop(cellPaddingTop);
        cell.setPaddingBottom(cellPaddingBottom);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Højde", verySmall));
        cell.setPaddingTop(cellPaddingTop);
        cell.setPaddingBottom(cellPaddingBottom);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Pris", verySmall));
        cell.setPaddingTop(cellPaddingTop);
        cell.setPaddingBottom(cellPaddingBottom);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Antal", verySmall));
        cell.setPaddingTop(cellPaddingTop);
        cell.setPaddingBottom(cellPaddingBottom);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);
    }

    private void addEmptyLine(Paragraph paragraph, int number)
    {
        for (int i = 0; i < number; i++)
        {
            paragraph.add(new Paragraph(" "));
        }
    }
}
